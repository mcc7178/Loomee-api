<?php

namespace App\Services;

use Hyperf\Redis\Redis;

class KlineService extends BaseService
{
    private static $url = 'https://api.huobipro.com/market/history/kline?period=';
    protected static $round = 8; // 获取的数量除以倍数
    protected static $rmb_price = 6.8; // usdt价格
    protected static $parities = 1; // usdt价格
    protected static $times = [
        1 => [
            'huobi' => '1min',
            'bian' => '1m'
        ],
        5 => [
            'huobi' => '5min',
            'bian' => '5m'
        ],
        15 => [
            'huobi' => '15min',
            'bian' => '15m'
        ],
        30 => [
            'huobi' => '30min',
            'bian' => '30m',
        ],
        60 => [
            'huobi' => '60min',
            'bian' => '1h'
        ],
        24 * 60 => [
            'huobi' => '1day',
            'bian' => '1d'
        ]
    ];
    public static $kline_key_prefix = 'market_kline_data:';
    public static $new_price_prefix = 'market_new_price:';
    public static $new_vol_prefix = 'market_new_vol:';
    public static $price_decline_prefix = 'price_decline:';
    public static $price_mm_prefix = 'price_mm:';

    /**
     * 爬虫
     * K线
     * $limit <= 2000
     */
    public static function huoBiNewData($limit, $market, $resolution = '1', $is_start = 0)
    {
        set_time_limit(0);
        $type = self::$times[$resolution]['huobi'];

        $kline_hah_key = self::$kline_key_prefix . $market . '-' . $type;
        // if ($market === 'eabc/usdt'){
        //    self::getEabcKline($limit, $market, $resolution = '1');
        // }

        $_url = self::$url . $type . '&size=' . $limit . '&symbol=' . str_replace('/', '', $market);
        $data = json_decode(CommonService::curl_request($_url), true);
        if (!$data) {
            static::addError('暂无数据', 400);
            return false;
        }
        if ($data && $data['status'] !== 'ok') {
            $error = $data['err-code'] . ':' . $data['err-msg'];
            static::addError($error, 400);
            return false;

        }
        // 获取时间：
        $data = $data['data'];
        if (!$data) {
            static::addError('暂无数据', 400);
            return false;
        }
        if ($is_start) {
            foreach ($data as $item) {
                $kline_item = [];
                if (Redis::hExists($kline_hah_key, $item['id'])) {
                    /**
                     * 格式： 时间戳 -成交数量 - 开盘价 - 最高价- 最低价 - 收盘价
                     */
                    $kline_item = Redis::hGet($kline_hah_key, $item['id']);
                    $kline_item = json_decode($kline_item, true);

                    if ($kline_item['amount'] > $item['amount']) $kline_item['amount'] = $item['amount'];
                    if ($kline_item['high'] > $item['high']) $kline_item['high'] = $item['high'];
                    if ($kline_item['low'] < $item['low']) $kline_item['low'] = $item['low'];
                } else {
                    $kline_item = [
                        'time' => $item['id'],
                        'amount' => $item['amount'],
                        'open' => $item['open'],
                        'high' => $item['high'],
                        'low' => $item['low'],
                        'close' => $item['close'],
                    ];
                }

                Redis::hSet($kline_hah_key, $item['id'], json_encode($kline_item));
            }
            unset($item);
        }

        return $data;
    }


    public static function getEabcKline($limit, $market, $resolution = '1')
    {
        switch ($resolution) {
            case 1:
                $fubt_type = 'min';
                break;
            case 5:
            case 15:
            case 30:
                $fubt_type = 'min' . $resolution;
                break;
            case 60:
                $fubt_type = 'hour1';
                break;
            case 60 * 3600:
                $fubt_type = 'day';
                break;
            default:
                $fubt_type = 'min';
                break;
        }
        $params = [
            'symbol' => 'eabcfbt',
            'klineType' => $fubt_type,
            'klineStep' => 'step5',
            'accessKey' => 'fn/Jvm9VJp8xkGpWcuIv+Ag1UFhMxBOj36T02Hnp6CM='
        ];
        ksort($params);
        $params = http_build_query($params);
        $secret = '/hu0Kamfw+ULiQv2f7ci9Q==';
        $signature = hash_hmac('sha256', $params, $secret);
        $signature = base64_encode($signature);
        $params = $params . "&signature=" . $signature;


        $data = CommonService::curl_request('https://api.fubt.co/v1/market/kline?' . $params);
        $data = json_decode($data, true);
        if ($data['status'] === 'success') {
            //$usdt_rmb_price = (new CoinRedis())->usdt_rmb_price();
            $usdt_rmb_price = 7;
            foreach ($data['data'] as $k => $item) {
                $open_price = bcdiv($item[1], $usdt_rmb_price, 4);
                $high_price = bcdiv($item[0], $usdt_rmb_price, 4);
                $low_price = bcdiv($item[2], $usdt_rmb_price, 4);
                $close_price = bcdiv($item[3], $usdt_rmb_price, 4);
                $start_time = $item[5] / 1000;
                $_data = [
                    $start_time,
                    number_format($item[4], 4, '.', ''),
                    number_format($open_price, 4, '.', ''),
                    number_format($high_price, 4, '.', ''),
                    number_format($low_price, 4, '.', ''),
                    number_format($close_price, 4, '.', ''),
                ];
                // if (Redis::hExists('market_kline:' . $market . ':' . $type . '_line_data', $start_time)) {
                //     /**
                //      * 格式： 时间戳 -成交数量 - 开盘价 - 最高价- 最低价 - 收盘价
                //      */
                //     $old = Redis::hGet('market_kline:' . $market . ':' . $type . '_line_data', $start_time);
                //     $old = json_decode($old, true);
                //     if ($old[1] > $_data[1]) $_data[1] = $old[1];
                //     if ($old[3] > $_data[3]) $_data[3] = $old[3];
                //     if ($old[4] < $_data[4]) $_data[4] = $old[4];
                // }
                // Redis::set('market_kline:' . $market . ':' . $type . ':kline_start_time', $start_time);
                // Redis::hSet('market_kline:' . $market . ':' . $type . '_line_data', $start_time, json_encode($_data));
            }
            echo 'eabcfbt--ok';
            return true;
        } else {
            echo "{$market}获取数据失败";
            return '';
        }
    }

    /**
     * K线入库
     * @param $market
     * @param $_type
     * @return array
     */
    public static function kline_to_mysql($market, $_type)
    {
        set_time_limit(0);
        switch ($_type) {
            case 'D':
                $type = '1day';
                $_type = 1440;
                break;
            default:
                $type = $_type . 'min';
                break;
        }
        $data = Redis::hGetAll('market_kline:' . $market . ':' . $type . '_line_data');
        if (!$data) return ['msg' => '数据不存在'];
        sort($data);
        $end_time = 0;
        $end = 0;
        if (Redis::exists('market_kline:' . $market . ':' . $type . ':kline_end_time')) {
            $end = Redis::get('market_kline:' . $market . ':' . $type . ':kline_end_time');
        }

        $count = count($data) - 3;
        foreach ($data as $k => $v) {
            $_v = json_decode($v, true);
            if ($end && $end > $v[0]) break;
            $model = "\App\Models\Trade_{$market}_jsons";
            $m = new $model();
            $_data = [
                'market' => $market,
                'data' => $v,
                'type' => $_type,
                'add_time' => $_v[0],
                'status' => 1
            ];
            if ($count == $k)
                $end_time = $_v[0];
            $m::updateOrCreate(['type' => $_type, 'add_time' => $v[0]], $_data);
        }
        if ($end_time > 0) {
            Redis::set('market_kline:' . $market . ':' . $type . ':kline_end_time', $end_time);
        }
    }

    /**
     * 获取K线
     * @param $market
     * @param $type
     * @param $from
     * @param $to
     * 1分钟K线：1442
     * 5分钟K线：1440
     * 15分钟K线： 1440
     * 60分钟K线： 1440
     * 60分钟K线： 365
     */
    public static function get_kline($market, $type, $from, $to)
    {
        switch ($type) {
            case 'D':
                $_type = '1day';
                $type = 1440;
                break;
            default:
                $_type = $type . 'min';
                break;
        }

        $step_arr = self::get_int_time($from, $to, $type);

        if (!Redis::exists('market_kline:' . $market . ':' . $_type . '_line_data')) {
            return ['s' => 'no_data', 'a' => 1];
        }

        $start = Redis::get('market_kline:' . $market . ':' . $type . ':kline_start_time');
        if ($to < $start)
            return ['s' => 'no_data', 'a' => 2];
        $_data = Redis::hMGet('market_kline:' . $market . ':' . $_type . '_line_data', $step_arr);
        $m = 0;
        $_v = [];
        foreach ($_data as $k => $v) {
            $v = json_decode($v, true);
            if (!$v) continue;
            if ($v) {
                $_v = $v;
            } else {
                if (count($_v)) {
                    $v = $_v;
                }
            }
            $m++;
            if ($v[2] <= 0) {
                continue;
            }
            if ($v[3] <= 0) {
                continue;
            }
            if ($v[4] <= 0) {
                continue;
            }
            if ($v[5] <= 0) {
                continue;
            }
            if ($v[1] <= 0) {
                $v[1] = 0.0001;
            }

            // 时间 - 数量 - 开盘价 - 最高价- 最低价 - 收盘价
            $data['t'][] = floatval($v[0]);
            $data['o'][] = floatval($v[2]);
            $data['h'][] = floatval($v[3]);
            $data['l'][] = floatval($v[4]);
            $data['c'][] = floatval($v[5]);
            $data['v'][] = floatval($v[1]);
        }
        if ($m)
            $data['s'] = 'ok';
        else
            return ['s' => 'no_data', 'a' => 3];

        return $data;
    }


    /**
     * 生成等差数组
     * @param $from
     * @param $step
     */
    public static function get_int_time($from, $to, $step, $change = false)
    {
        $from = strtotime(date("Y-m-d H:i", $from));
        $to = strtotime(date("Y-m-d H:i", $to));

        if ($step == 1) {

        } elseif ($step == 1440) {
            $from = strtotime(date("Y-m-d", $from)) - 86400;
            $to = strtotime(date("Y-m-d", $to)) + 86400;
        } else {
            $minute = date("i", $from);
            $remainder = $minute % $step;
            if ($remainder != 0)
                $from = $from - $remainder * 60;
            $remainder = $to % $step;
            if ($remainder != 0)
                $to = $to + ($step - $remainder) * 60;
        }
        if ($change) {
            return $from;
        }
        return self::array_range($from, $to, $step * 60);
    }

    public static function get_now_time($from, $step)
    {
        $from = strtotime(date("Y-m-d H:i", $from));

        if ($step == 1) {

        } elseif ($step == 1440) {
            $from = strtotime(date("Y-m-d", $from)) - 86400;
        } else {
            $minute = date("i", $from);
            $remainder = $minute % $step;
            if ($remainder != 0)
                $from = $from - $remainder * 60;
        }
        return $from;
    }

    /**
     * 生成等差数组
     * @param $from
     * @param $step
     */
    protected static function array_range($from, $to, $step)
    {
        $array = array();
        for ($x = $from; $x <= $to; $x += $step) {
            $array[$x] = $x;
        }
        return $array;
    }

    /**
     * 更新撮合交易产生的数据形成K线
     * @param $market
     * @param $number
     * @param $price
     */
    public static function change_dear_to_kline($market, $number, $price)
    {


        // 格式： 时间戳 -成交数量 - 开盘价 - 最高价- 最低价 - 收盘价
        $types = [
            1, 5, 15, 30, 60, 1440
        ];
        $time = strtotime(date('Y-m-d H:i'));
        foreach ($types as $type) {
            $_type = self::$times[$type]['huobi'];
            $kline_hash_key = 'market_kline_data:' . $market . '-' . $_type;
            if ($type == 1440) {
                $time = strtotime(date('Y-m-d'));
            } else {
                $minute = $type * 60;
                $time = floor($time / $minute) * $minute;
            }
            $_data = [
                'time' => $time, 'amount' => $number, 'open' => $price, 'high' => $price, 'low' => $price, 'close' => $price
            ];
            if (Redis::hExists($kline_hash_key, $time)) {
                /**
                 * 格式： 0 时间戳 -1 成交数量 - 2 开盘价 - 3 最高价- 4 最低价 - 5 收盘价
                 */
                $old = Redis::hGet($kline_hash_key, $time);
                $old = json_decode($old, true);

                $_data['amount'] = $old['amount'] + $_data['amount'];
                $_data['open'] = $old['open'];
                if ($old['high'] > $_data['high']) $_data['high'] = $old['high'];
                if ($old['low'] < $_data['low']) $_data['low'] = $old['low'];
            }
            Redis::hSet($kline_hash_key, $time, json_encode($_data));
        }

    }

    public static function getKlineTypeFormat($type)
    {
        $types = [
            '1min' => 1,
            '5min' => 5,
            '15min' => 15,
            '30min' => 30,
            '60min' => 60,
            '1day' => 1440
        ];
        return $types[$type] ?? false;
    }

    //获取kline所有数据
    public static function getKline222($market, $type, $is_reptile = 1)
    {
        $fileds = [1645372800, 1645372860, 1645372920, 1645372980, 1645373040, 1645373100, 1645373160, 1645373220, 1645373280, 1645373340, 1645373400, 1645373460, 1645373520, 1645373580, 1645373640, 1645373700, 1645373760, 1645373820, 1645373880, 1645373940, 1645374000, 1645374060, 1645374120, 1645374180, 1645374240, 1645374300, 1645374360, 1645374420, 1645374480, 1645374540, 1645374600, 1645374660, 1645374720, 1645374780, 1645374840, 1645374900, 1645374960, 1645375020, 1645375080, 1645375140, 1645375200, 1645375260, 1645375320, 1645375380, 1645375440, 1645375500, 1645375560, 1645375620, 1645375680, 1645375740, 1645375800, 1645375860, 1645375920, 1645375980, 1645376040, 1645376100, 1645376160, 1645376220, 1645376280, 1645376340, 1645376400, 1645376460, 1645376520, 1645376580, 1645376640, 1645376700, 1645376760, 1645376820, 1645376880, 1645376940, 1645377000, 1645377060, 1645377120, 1645377180, 1645377240, 1645377300, 1645377360, 1645377420, 1645377480, 1645377540, 1645377600, 1645377660, 1645377720, 1645377780, 1645377840, 1645377900, 1645377960, 1645378020, 1645378080, 1645378140, 1645378200, 1645378260, 1645378320, 1645378380, 1645378440, 1645378500, 1645378560, 1645378620, 1645378680, 1645378740, 1645378800, 1645378860, 1645378920, 1645378980, 1645379040, 1645379100, 1645379160, 1645379220, 1645379280, 1645379340, 1645379400, 1645379460, 1645379520, 1645379580, 1645379640, 1645379700, 1645379760, 1645379820, 1645379880, 1645379940, 1645380000, 1645380060, 1645380120, 1645380180, 1645380240, 1645380300, 1645380360, 1645380420, 1645380480, 1645380540, 1645380600, 1645380660, 1645380720, 1645380780, 1645380840, 1645380900, 1645380960, 1645381020, 1645381080, 1645381140, 1645381200, 1645381260, 1645381320, 1645381380, 1645381440, 1645381500, 1645381560, 1645381620, 1645381680, 1645381740, 1645381800, 1645381860, 1645381920, 1645381980, 1645382040, 1645382100, 1645382160, 1645382220, 1645382280, 1645382340, 1645382400, 1645382460, 1645382520, 1645382580, 1645382640, 1645382700, 1645382760, 1645382820, 1645382880, 1645382940, 1645383000, 1645383060, 1645383120, 1645383180, 1645383240, 1645383300, 1645383360, 1645383420, 1645383480, 1645383540, 1645383600, 1645383660, 1645383720, 1645383780, 1645383840, 1645383900, 1645383960, 1645384020, 1645384080, 1645384140, 1645384200, 1645384260, 1645384320, 1645384380, 1645384440, 1645384500, 1645384560, 1645384620, 1645384680, 1645384740, 1645384800, 1645384860, 1645384920, 1645384980, 1645385040, 1645385100, 1645385160, 1645385220, 1645385280, 1645385340, 1645385400, 1645385460, 1645385520, 1645385580, 1645385640, 1645385700, 1645385760, 1645385820, 1645385880, 1645385940, 1645386000, 1645386060, 1645386120, 1645386180, 1645386240, 1645386300, 1645386360, 1645386420, 1645386480, 1645386540, 1645386600, 1645386660, 1645386720, 1645386780, 1645386840, 1645386900, 1645386960, 1645387020, 1645387080, 1645387140, 1645387200, 1645387260, 1645387320, 1645387380, 1645387440, 1645387500, 1645387560, 1645387620, 1645387680, 1645387740, 1645387800, 1645387860, 1645387920, 1645387980, 1645388040, 1645388100, 1645388160, 1645388220, 1645388280, 1645388340, 1645388400, 1645388460, 1645388520, 1645388580, 1645388640, 1645388700, 1645388760, 1645388820, 1645388880, 1645388940, 1645389000, 1645389060, 1645389120, 1645389180, 1645389240, 1645389300, 1645389360, 1645389420, 1645389480, 1645389540, 1645389600, 1645389660, 1645389720, 1645389780, 1645389840, 1645389900, 1645389960, 1645390020, 1645390080, 1645390140, 1645390200, 1645390260, 1645390320, 1645390380, 1645390440, 1645390500, 1645390560, 1645390620, 1645390680, 1645390740, 1645390800, 1645390860, 1645390920, 1645390980, 1645391040, 1645391100, 1645391160, 1645391220, 1645391280, 1645391340, 1645391400, 1645391460, 1645391520, 1645391580, 1645391640, 1645391700, 1645391760, 1645391820, 1645391880, 1645391940, 1645392000, 1645392060, 1645392120, 1645392180, 1645392240, 1645392300, 1645392360, 1645392420, 1645392480, 1645392540, 1645392600, 1645392660, 1645392720, 1645392780, 1645392840, 1645392900, 1645392960, 1645393020, 1645393080, 1645393140, 1645393200, 1645393260, 1645393320, 1645393380, 1645393440, 1645393500, 1645393560, 1645393620, 1645393680, 1645393740, 1645393800, 1645393860, 1645393920, 1645393980, 1645394040, 1645394100, 1645394160, 1645394220, 1645394280, 1645394340, 1645394400, 1645394460, 1645394520, 1645394580, 1645394640, 1645394700, 1645394760, 1645394820, 1645394880, 1645394940, 1645395000, 1645395060, 1645395120, 1645395180, 1645395240, 1645395300, 1645395360, 1645395420, 1645395480, 1645395540, 1645395600, 1645395660, 1645395720, 1645395780, 1645395840, 1645395900, 1645395960, 1645396020, 1645396080, 1645396140, 1645396200, 1645396260, 1645396320, 1645396380, 1645396440, 1645396500, 1645396560, 1645396620, 1645396680, 1645396740, 1645396800, 1645396860, 1645396920, 1645396980, 1645397040, 1645397100, 1645397160, 1645397220, 1645397280, 1645397340, 1645397400, 1645397460, 1645397520, 1645397580, 1645397640, 1645397700, 1645397760, 1645397820, 1645397880, 1645397940, 1645398000, 1645398060, 1645398120, 1645398180, 1645398240, 1645398300, 1645398360, 1645398420, 1645398480, 1645398540, 1645398600, 1645398660, 1645398720, 1645398780, 1645398840, 1645398900, 1645398960, 1645399020, 1645399080, 1645399140, 1645399200, 1645399260, 1645399320, 1645399380, 1645399440, 1645399500, 1645399560, 1645399620, 1645399680, 1645399740, 1645399800, 1645399860, 1645399920, 1645399980, 1645400040, 1645400100, 1645400160, 1645400220, 1645400280, 1645400340, 1645400400, 1645400460, 1645400520, 1645400580, 1645400640, 1645400700, 1645400760, 1645400820, 1645400880, 1645400940, 1645401000, 1645401060, 1645401120, 1645401180, 1645401240, 1645401300, 1645401360, 1645401420, 1645401480, 1645401540, 1645401600, 1645401660, 1645401720, 1645401780, 1645401840, 1645401900, 1645401960, 1645402020, 1645402080, 1645402140, 1645402200, 1645402260, 1645402320, 1645402380, 1645402440, 1645402500, 1645402560, 1645402620, 1645402680, 1645402740, 1645402800, 1645402860, 1645402920, 1645402980, 1645403040, 1645403100, 1645403160, 1645403220, 1645403280, 1645403340, 1645403400, 1645403460, 1645403520, 1645403580, 1645403640, 1645403700, 1645403760, 1645403820, 1645403880, 1645403940, 1645404000, 1645404060, 1645404120, 1645404180, 1645404240, 1645404300, 1645404360, 1645404420, 1645404480, 1645404540, 1645404600, 1645404660, 1645404720, 1645404780, 1645404840, 1645404900, 1645404960, 1645405020, 1645405080, 1645405140, 1645405200, 1645405260, 1645405320, 1645405380, 1645405440, 1645405500, 1645405560, 1645405620, 1645405680, 1645405740, 1645405800, 1645405860, 1645405920, 1645405980, 1645406040, 1645406100, 1645406160, 1645406220, 1645406280, 1645406340, 1645406400, 1645406460, 1645406520, 1645406580, 1645406640, 1645406700, 1645406760, 1645406820, 1645406880, 1645406940, 1645407000, 1645407060, 1645407120, 1645407180, 1645407240, 1645407300, 1645407360, 1645407420, 1645407480, 1645407540, 1645407600, 1645407660, 1645407720, 1645407780, 1645407840, 1645407900, 1645407960, 1645408020, 1645408080, 1645408140, 1645408200, 1645408260, 1645408320, 1645408380, 1645408440, 1645408500, 1645408560, 1645408620, 1645408680, 1645408740, 1645408800, 1645408860, 1645408920, 1645408980, 1645409040, 1645409100, 1645409160, 1645409220, 1645409280, 1645409340, 1645409400, 1645409460, 1645409520, 1645409580, 1645409640, 1645409700, 1645409760, 1645409820, 1645409880, 1645409940, 1645410000, 1645410060, 1645410120, 1645410180, 1645410240, 1645410300, 1645410360, 1645410420, 1645410480, 1645410540, 1645410600, 1645410660, 1645410720, 1645410780, 1645410840, 1645410900, 1645410960, 1645411020, 1645411080, 1645411140, 1645411200, 1645411260, 1645411320, 1645411380, 1645411440, 1645411500, 1645411560, 1645411620, 1645411680, 1645411740, 1645411800, 1645411860, 1645411920, 1645411980, 1645412040, 1645412100, 1645412160, 1645412220, 1645412280, 1645412340, 1645412400, 1645412460, 1645412520, 1645412580, 1645412640, 1645412700, 1645412760, 1645412820, 1645412880, 1645412940, 1645413000, 1645413060, 1645413120, 1645413180, 1645413240, 1645413300, 1645413360, 1645413420, 1645413480, 1645413540, 1645413600, 1645413660, 1645413720, 1645413780, 1645413840, 1645413900, 1645413960, 1645414020, 1645414080, 1645414140, 1645414200, 1645414260, 1645414320, 1645414380, 1645414440, 1645414500, 1645414560, 1645414620, 1645414680, 1645414740, 1645414800, 1645414860, 1645414920, 1645414980, 1645415040, 1645415100, 1645415160, 1645415220, 1645415280, 1645415340, 1645415400, 1645415460, 1645415520, 1645415580, 1645415640, 1645415700, 1645415760, 1645415820, 1645415880, 1645415940, 1645416000, 1645416060, 1645416120, 1645416180, 1645416240, 1645416300, 1645416360, 1645416420, 1645416480, 1645416540, 1645416600, 1645416660, 1645416720, 1645416780, 1645416840, 1645416900, 1645416960, 1645417020, 1645417080, 1645417140, 1645417200, 1645417260, 1645417320, 1645417380, 1645417440, 1645417500, 1645417560, 1645417620, 1645417680, 1645417740, 1645417800, 1645417860, 1645417920, 1645417980, 1645418040, 1645418100, 1645418160, 1645418220, 1645418280, 1645418340, 1645418400, 1645418460, 1645418520, 1645418580, 1645418640, 1645418700, 1645418760, 1645418820, 1645418880, 1645418940, 1645419000, 1645419060, 1645419120, 1645419180, 1645419240, 1645419300, 1645419360, 1645419420, 1645419480, 1645419540, 1645419600, 1645419660, 1645419720, 1645419780, 1645419840, 1645419900, 1645419960, 1645420020, 1645420080, 1645420140, 1645420200, 1645420260, 1645420320, 1645420380, 1645420440, 1645420500, 1645420560, 1645420620, 1645420680, 1645420740, 1645420800, 1645420860, 1645420920, 1645420980, 1645421040, 1645421100, 1645421160, 1645421220, 1645421280, 1645421340, 1645421400, 1645421460, 1645421520, 1645421580, 1645421640, 1645421700, 1645421760, 1645421820, 1645421880, 1645421940, 1645422000, 1645422060, 1645422120, 1645422180, 1645422240, 1645422300, 1645422360, 1645422420, 1645422480, 1645422540, 1645422600, 1645422660, 1645422720, 1645422780, 1645422840, 1645422900, 1645422960, 1645423020, 1645423080, 1645423140, 1645423200, 1645423260, 1645423320, 1645423380, 1645423440, 1645423500, 1645423560, 1645423620, 1645423680, 1645423740, 1645423800, 1645423860, 1645423920, 1645423980, 1645424040, 1645424100, 1645424160, 1645424220, 1645424280, 1645424340, 1645424400, 1645424460, 1645424520, 1645424580, 1645424640, 1645424700, 1645424760, 1645424820, 1645424880, 1645424940, 1645425000, 1645425060, 1645425120, 1645425180, 1645425240, 1645425300, 1645425360, 1645425420, 1645425480, 1645425540, 1645425600, 1645425660, 1645425720, 1645425780, 1645425840, 1645425900, 1645425960, 1645426020, 1645426080, 1645426140, 1645426200, 1645426260, 1645426320, 1645426380, 1645426440, 1645426500, 1645426560, 1645426620, 1645426680, 1645426740, 1645426800, 1645426860, 1645426920, 1645426980, 1645427040, 1645427100, 1645427160, 1645427220, 1645427280, 1645427340, 1645427400, 1645427460, 1645427520, 1645427580, 1645427640, 1645427700, 1645427760, 1645427820, 1645427880, 1645427940, 1645428000, 1645428060, 1645428120, 1645428180, 1645428240, 1645428300, 1645428360, 1645428420, 1645428480, 1645428540, 1645428600, 1645428660, 1645428720, 1645428780, 1645428840, 1645428900, 1645428960, 1645429020, 1645429080, 1645429140, 1645429200, 1645429260, 1645429320, 1645429380, 1645429440, 1645429500, 1645429560, 1645429620, 1645429680, 1645429740, 1645429800, 1645429860, 1645429920, 1645429980, 1645430040, 1645430100, 1645430160, 1645430220, 1645430280, 1645430340, 1645430400, 1645430460, 1645430520, 1645430580, 1645430640, 1645430700, 1645430760, 1645430820, 1645430880, 1645430940, 1645431000, 1645431060, 1645431120, 1645431180, 1645431240, 1645431300, 1645431360, 1645431420, 1645431480, 1645431540, 1645431600, 1645431660, 1645431720, 1645431780, 1645431840, 1645431900, 1645431960, 1645432020, 1645432080, 1645432140, 1645432200, 1645432260, 1645432320, 1645432380, 1645432440, 1645432500, 1645432560, 1645432620, 1645432680, 1645432740, 1645432800, 1645432860, 1645432920, 1645432980, 1645433040, 1645433100, 1645433160, 1645433220, 1645433280, 1645433340, 1645433400, 1645433460, 1645433520, 1645433580, 1645433640, 1645433700, 1645433760, 1645433820, 1645433880, 1645433940, 1645434000, 1645434060, 1645434120, 1645434180, 1645434240, 1645434300, 1645434360, 1645434420, 1645434480, 1645434540, 1645434600, 1645434660, 1645434720, 1645434780, 1645434840, 1645434900, 1645434960, 1645435020, 1645435080, 1645435140, 1645435200, 1645435260, 1645435320, 1645435380, 1645435440, 1645435500, 1645435560, 1645435620, 1645435680, 1645435740, 1645435800, 1645435860, 1645435920, 1645435980, 1645436040, 1645436100, 1645436160, 1645436220, 1645436280, 1645436340, 1645436400, 1645436460, 1645436520, 1645436580, 1645436640, 1645436700, 1645436760, 1645436820, 1645436880, 1645436940, 1645437000, 1645437060, 1645437120, 1645437180, 1645437240, 1645437300, 1645437360, 1645437420, 1645437480, 1645437540, 1645437600, 1645437660, 1645437720, 1645437780, 1645437840, 1645437900, 1645437960, 1645438020, 1645438080, 1645438140, 1645438200, 1645438260, 1645438320, 1645438380, 1645438440, 1645438500, 1645438560, 1645438620, 1645438680, 1645438740, 1645438800, 1645438860, 1645438920, 1645438980, 1645439040, 1645439100, 1645439160, 1645439220, 1645439280, 1645439340, 1645439400, 1645439460, 1645439520, 1645439580, 1645439640, 1645439700, 1645439760, 1645439820, 1645439880, 1645439940, 1645440000, 1645440060, 1645440120, 1645440180, 1645440240, 1645440300, 1645440360, 1645440420, 1645440480, 1645440540, 1645440600, 1645440660, 1645440720, 1645440780, 1645440840, 1645440900, 1645440960, 1645441020, 1645441080, 1645441140, 1645441200, 1645441260, 1645441320, 1645441380, 1645441440, 1645441500, 1645441560, 1645441620, 1645441680, 1645441740, 1645441800, 1645441860, 1645441920, 1645441980, 1645442040, 1645442100, 1645442160, 1645442220, 1645442280, 1645442340, 1645442400, 1645442460, 1645442520, 1645442580, 1645442640, 1645442700, 1645442760, 1645442820, 1645442880, 1645442940, 1645443000, 1645443060, 1645443120, 1645443180, 1645443240, 1645443300, 1645443360, 1645443420, 1645443480, 1645443540, 1645443600, 1645443660, 1645443720, 1645443780, 1645443840, 1645443900, 1645443960, 1645444020, 1645444080, 1645444140, 1645444200, 1645444260, 1645444320, 1645444380, 1645444440, 1645444500, 1645444560, 1645444620, 1645444680, 1645444740, 1645444800, 1645444860, 1645444920, 1645444980, 1645445040, 1645445100, 1645445160, 1645445220, 1645445280, 1645445340, 1645445400, 1645445460, 1645445520, 1645445580, 1645445640, 1645445700, 1645445760, 1645445820, 1645445880, 1645445940, 1645446000, 1645446060, 1645446120, 1645446180, 1645446240, 1645446300, 1645446360, 1645446420, 1645446480, 1645446540, 1645446600, 1645446660, 1645446720, 1645446780, 1645446840, 1645446900, 1645446960, 1645447020, 1645447080, 1645447140, 1645447200, 1645447260, 1645447320, 1645447380, 1645447440, 1645447500, 1645447560, 1645447620, 1645447680, 1645447740, 1645447800, 1645447860, 1645447920, 1645447980, 1645448040, 1645448100, 1645448160, 1645448220, 1645448280, 1645448340, 1645448400, 1645448460, 1645448520, 1645448580, 1645448640, 1645448700, 1645448760, 1645448820, 1645448880, 1645448940, 1645449000, 1645449060, 1645449120, 1645449180, 1645449240, 1645449300, 1645449360, 1645449420, 1645449480, 1645449540, 1645449600, 1645449660, 1645449720, 1645449780, 1645449840, 1645449900, 1645449960, 1645450020, 1645450080, 1645450140, 1645450200, 1645450260, 1645450320, 1645450380, 1645450440, 1645450500, 1645450560, 1645450620, 1645450680, 1645450740, 1645450800, 1645450860, 1645450920, 1645450980, 1645451040, 1645451100, 1645451160, 1645451220, 1645451280, 1645451340, 1645451400, 1645451460, 1645451520, 1645451580, 1645451640, 1645451700, 1645451760, 1645451820, 1645451880, 1645451940, 1645452000, 1645452060, 1645452120, 1645452180, 1645452240, 1645452300, 1645452360, 1645452420, 1645452480, 1645452540, 1645452600, 1645452660, 1645452720, 1645452780, 1645452840, 1645452900, 1645452960, 1645453020, 1645453080, 1645453140, 1645453200, 1645453260, 1645453320, 1645453380, 1645453440, 1645453500, 1645453560, 1645453620, 1645453680, 1645453740, 1645453800, 1645453860, 1645453920, 1645453980, 1645454040, 1645454100, 1645454160, 1645454220, 1645454280, 1645454340, 1645454400, 1645454460, 1645454520, 1645454580, 1645454640, 1645454700, 1645454760, 1645454820, 1645454880, 1645454940, 1645455000, 1645455060, 1645455120, 1645455180, 1645455240, 1645455300, 1645455360, 1645455420, 1645455480, 1645455540, 1645455600, 1645455660, 1645455720, 1645455780, 1645455840, 1645455900, 1645455960, 1645456020, 1645456080, 1645456140, 1645456200, 1645456260, 1645456320, 1645456380, 1645456440, 1645456500, 1645456560, 1645456620, 1645456680, 1645456740, 1645456800, 1645456860, 1645456920, 1645456980, 1645457040, 1645457100, 1645457160, 1645457220, 1645457280, 1645457340, 1645457400, 1645457460, 1645457520, 1645457580, 1645457640, 1645457700, 1645457760, 1645457820, 1645457880, 1645457940, 1645458000, 1645458060, 1645458120, 1645458180, 1645458240, 1645458300, 1645458360, 1645458420, 1645458480, 1645458540, 1645458600, 1645458660, 1645458720, 1645458780, 1645458840, 1645458900, 1645458960, 1645459020, 1645459080, 1645459140, 1645459200, 1645459260, 1645459320, 1645459380, 1645459440, 1645459500, 1645459560, 1645459620, 1645459680, 1645459740, 1645459800, 1645459860, 1645459920, 1645459980, 1645460040, 1645460100, 1645460160, 1645460220, 1645460280, 1645460340, 1645460400, 1645460460, 1645460520, 1645460580, 1645460640, 1645460700, 1645460760, 1645460820, 1645460880, 1645460940, 1645461000, 1645461060, 1645461120, 1645461180, 1645461240, 1645461300, 1645461360, 1645461420, 1645461480, 1645461540, 1645461600, 1645461660, 1645461720, 1645461780, 1645461840, 1645461900, 1645461960, 1645462020, 1645462080, 1645462140, 1645462200, 1645462260, 1645462320, 1645462380, 1645462440, 1645462500, 1645462560, 1645462620, 1645462680, 1645462740, 1645462800, 1645462860, 1645462920, 1645462980, 1645463040, 1645463100, 1645463160, 1645463220, 1645463280, 1645463340, 1645463400, 1645463460, 1645463520, 1645463580, 1645463640, 1645463700, 1645463760, 1645463820, 1645463880, 1645463940, 1645464000, 1645464060, 1645464120, 1645464180, 1645464240, 1645464300, 1645464360, 1645464420, 1645464480, 1645464540, 1645464600, 1645464660, 1645464720, 1645464780, 1645464840, 1645464900, 1645464960, 1645465020, 1645465080, 1645465140, 1645465200, 1645465260, 1645465320, 1645465380, 1645465440, 1645465500, 1645465560, 1645465620, 1645465680, 1645465740, 1645465800, 1645465860, 1645465920, 1645465980, 1645466040, 1645466100, 1645466160, 1645466220, 1645466280, 1645466340, 1645466400, 1645466460, 1645466520, 1645466580, 1645466640, 1645466700, 1645466760, 1645466820, 1645466880, 1645466940, 1645467000, 1645467060, 1645467120, 1645467180, 1645467240, 1645467300, 1645467360, 1645467420, 1645467480, 1645467540, 1645467600, 1645467660, 1645467720, 1645467780, 1645467840, 1645467900, 1645467960, 1645468020, 1645468080, 1645468140, 1645468200, 1645468260, 1645468320, 1645468380, 1645468440, 1645468500, 1645468560, 1645468620, 1645468680, 1645468740, 1645468800, 1645468860, 1645468920, 1645468980, 1645469040, 1645469100, 1645469160, 1645469220, 1645469280, 1645469340, 1645469400, 1645469460, 1645469520, 1645469580, 1645469640, 1645469700, 1645469760, 1645469820, 1645469880, 1645469940, 1645470000, 1645470060, 1645470120, 1645470180, 1645470240, 1645470300, 1645470360, 1645470420, 1645470480, 1645470540, 1645470600, 1645470660, 1645470720, 1645470780, 1645470840, 1645470900, 1645470960, 1645471020, 1645471080, 1645471140, 1645471200, 1645471260, 1645471320, 1645471380, 1645471440, 1645471500, 1645471560, 1645471620, 1645471680, 1645471740, 1645471800, 1645471860, 1645471920, 1645471980, 1645472040, 1645472100, 1645472160, 1645472220, 1645472280, 1645472340, 1645472400, 1645472460, 1645472520, 1645472580, 1645472640, 1645472700, 1645472760, 1645472820, 1645472880, 1645472940, 1645473000, 1645473060, 1645473120, 1645473180, 1645473240, 1645473300, 1645473360, 1645473420, 1645473480, 1645473540, 1645473600, 1645473660, 1645473720, 1645473780, 1645473840, 1645473900, 1645473960, 1645474020, 1645474080, 1645474140, 1645474200, 1645474260, 1645474320, 1645474380, 1645474440, 1645474500, 1645474560, 1645474620, 1645474680, 1645474740, 1645474800, 1645474860, 1645474920, 1645474980, 1645475040, 1645475100, 1645475160, 1645475220, 1645475280, 1645475340, 1645475400, 1645475460, 1645475520, 1645475580, 1645475640, 1645475700, 1645475760, 1645475820, 1645475880, 1645475940, 1645476000, 1645476060, 1645476120, 1645476180, 1645476240, 1645476300, 1645476360, 1645476420, 1645476480, 1645476540, 1645476600, 1645476660, 1645476720, 1645476780, 1645476840, 1645476900, 1645476960, 1645477020, 1645477080, 1645477140, 1645477200, 1645477260, 1645477320, 1645477380, 1645477440, 1645477500, 1645477560, 1645477620, 1645477680, 1645477740, 1645477800, 1645477860, 1645477920, 1645477980, 1645478040, 1645478100, 1645478160, 1645478220, 1645478280, 1645478340, 1645478400, 1645478460, 1645478520, 1645478580, 1645478640, 1645478700, 1645478760, 1645478820, 1645478880, 1645478940, 1645479000, 1645479060, 1645479120, 1645479180, 1645479240, 1645479300, 1645479360, 1645479420, 1645479480, 1645479540, 1645479600, 1645479660, 1645479720, 1645479780, 1645479840, 1645479900, 1645479960, 1645480020, 1645480080, 1645480140, 1645480200, 1645480260, 1645480320, 1645480380, 1645480440, 1645480500, 1645480560, 1645480620, 1645480680, 1645480740, 1645480800, 1645480860, 1645480920, 1645480980, 1645481040, 1645481100, 1645481160, 1645481220, 1645481280, 1645481340, 1645481400, 1645481460, 1645481520, 1645481580, 1645481640, 1645481700, 1645481760, 1645481820, 1645481880, 1645481940, 1645482000, 1645482060, 1645482120, 1645482180, 1645482240, 1645482300, 1645482360, 1645482420, 1645482480, 1645482540, 1645482600, 1645482660, 1645482720, 1645482780, 1645482840, 1645482900, 1645482960, 1645483020, 1645483080, 1645483140, 1645483200, 1645483260, 1645483320, 1645483380, 1645483440, 1645483500, 1645483560, 1645483620, 1645483680, 1645483740, 1645483800, 1645483860, 1645483920, 1645483980, 1645484040, 1645484100, 1645484160, 1645484220, 1645484280, 1645484340, 1645484400, 1645484460, 1645484520, 1645484580, 1645484640, 1645484700, 1645484760, 1645484820, 1645484880, 1645484940, 1645485000, 1645485060, 1645485120, 1645485180, 1645485240, 1645485300, 1645485360, 1645485420, 1645485480, 1645485540, 1645485600, 1645485660, 1645485720, 1645485780, 1645485840, 1645485900, 1645485960, 1645486020, 1645486080, 1645486140, 1645486200, 1645486260, 1645486320, 1645486380, 1645486440, 1645486500, 1645486560, 1645486620, 1645486680, 1645486740, 1645486800, 1645486860, 1645486920, 1645486980, 1645487040, 1645487100, 1645487160, 1645487220, 1645487280, 1645487340, 1645487400, 1645487460, 1645487520, 1645487580, 1645487640, 1645487700, 1645487760, 1645487820, 1645487880, 1645487940, 1645488000, 1645488060, 1645488120, 1645488180, 1645488240, 1645488300, 1645488360, 1645488420, 1645488480, 1645488540, 1645488600, 1645488660, 1645488720, 1645488780, 1645488840, 1645488900, 1645488960, 1645489020, 1645489080, 1645489140, 1645489200, 1645489260, 1645489320, 1645489380, 1645489440, 1645489500, 1645489560, 1645489620, 1645489680, 1645489740, 1645489800, 1645489860, 1645489920, 1645489980, 1645490040, 1645490100, 1645490160, 1645490220, 1645490280, 1645490340, 1645490400, 1645490460, 1645490520, 1645490580, 1645490640, 1645490700, 1645490760, 1645490820, 1645490880, 1645490940, 1645491000, 1645491060, 1645491120, 1645491180, 1645491240, 1645491300, 1645491360, 1645491420, 1645491480, 1645491540, 1645491600, 1645491660, 1645491720, 1645491780, 1645491840, 1645491900, 1645491960, 1645492020, 1645492080, 1645492140, 1645492200, 1645492260, 1645492320, 1645492380, 1645492440, 1645492500, 1645492560, 1645492620, 1645492680, 1645492740, 1645492800, 1645492860, 1645492920, 1645492980, 1645493040, 1645493100, 1645493160, 1645493220, 1645493280, 1645493340, 1645493400, 1645493460, 1645493520, 1645493580, 1645493640, 1645493700, 1645493760, 1645493820, 1645493880, 1645493940, 1645494000, 1645494060, 1645494120, 1645494180, 1645494240, 1645494300, 1645494360, 1645494420, 1645494480, 1645494540, 1645494600, 1645494660, 1645494720, 1645494780, 1645494840, 1645494900, 1645494960, 1645495020, 1645495080, 1645495140, 1645495200, 1645495260, 1645495320, 1645495380, 1645495440, 1645495500, 1645495560, 1645495620, 1645495680, 1645495740, 1645495800, 1645495860, 1645495920, 1645495980, 1645496040, 1645496100, 1645496160, 1645496220, 1645496280, 1645496340, 1645496400, 1645496460, 1645496520, 1645496580, 1645496640, 1645496700, 1645496760, 1645496820, 1645496880, 1645496940, 1645497000, 1645497060, 1645497120, 1645497180, 1645497240, 1645497300, 1645497360, 1645497420, 1645497480, 1645497540, 1645497600, 1645497660, 1645497720, 1645497780, 1645497840, 1645497900, 1645497960, 1645498020, 1645498080, 1645498140, 1645498200, 1645498260, 1645498320, 1645498380, 1645498440, 1645498500, 1645498560, 1645498620, 1645498680, 1645498740, 1645498800, 1645498860, 1645498920, 1645498980, 1645499040, 1645499100, 1645499160, 1645499220, 1645499280, 1645499340, 1645499400, 1645499460, 1645499520, 1645499580, 1645499640, 1645499700, 1645499760, 1645499820, 1645499880, 1645499940, 1645500000, 1645500060, 1645500120, 1645500180, 1645500240, 1645500300, 1645500360, 1645500420, 1645500480, 1645500540, 1645500600, 1645500660, 1645500720, 1645500780, 1645500840, 1645500900, 1645500960, 1645501020, 1645501080, 1645501140, 1645501200, 1645501260, 1645501320, 1645501380, 1645501440, 1645501500, 1645501560, 1645501620, 1645501680, 1645501740, 1645501800, 1645501860, 1645501920, 1645501980, 1645502040, 1645502100, 1645502160, 1645502220, 1645502280];
        $key = self::$kline_key_prefix . $market . '-' . $type;
        if ($type == 1) {
            $data = Redis::hMGet($key, $fileds) ?: [];
        } else
            $data = Redis::hGetAll($key) ?: [];
        $firstTime = 0;

        foreach ($data as $time => $kline) {
            $firstTime = $time;
        }

        $klineData = [];
        foreach ($fileds as $filed) {
            if ($filed < $firstTime)
                continue;
            if (!isset($data[$filed])) {
                $k = end($klineData);
                $k['time'] = $filed;
                $k['amount'] = 0;
                $k['volume'] = 0;
                $klineData[] = $k;
            } else {
                $k = json_decode($data[$filed], true);
                $k['volume'] = $k['amount'];
                $klineData[] = $k;
            }
        }
        return $klineData;


    }

    public static function getKline($market, $type, $is_reptile = 1)
    {
        $types = [
            '1min' => 1,
            '5min' => 5,
            '15min' => 15,
            '30min' => 30,
            '60min' => 60,
            '1day' => 1440,
            '1week' => 10800,
            '1month' => 43200
        ];
        $key = self::$kline_key_prefix . $market . '-' . $type;
        if (!isset($types[$type])) {
            static::addError('参数类型错误', 400);
            return false;
        }

        $type = $types[$type];
        $fileds = [];
        //获取当前时间（分）
        $now_time = self::getCurrentMinute();

        //计算取200条的起始时间
        $start_time = strtotime(date('Y-m-d', strtotime('-30 day')));
        if ($type == 1 || $type == 5) {
            $start_time = strtotime(date('Y-m-d', strtotime('-1 day')));
        } else if ($type == 15 || $type == 30) {
            $start_time = strtotime(date('Y-m-d', strtotime('-5 day')));
        } else if ($type == 1440) {
            $start_time = strtotime(date('Y', $start_time));
        } else {
            $start_time = strtotime(date('Y', $start_time) - 86400 * 365);
        }

        if ($type >= 1440) {
            $data = Redis::hGetAll($key) ?: [];
            if (empty($data))
                return [];
            foreach ($data as $datum) {
                $k = json_decode($datum, true);
                $k['volume'] = isset($k['amount']) ? $k['amount'] : 0;
                $klineData[] = $k;
            }
            return self::arraySort($klineData, 'time', SORT_ASC);
        }

        //根据类型取起始时间的时间段
        while ($start_time <= $now_time) {
            array_push($fileds, $start_time);
            $start_time += 60 * $type;
        }


        if ($type == 1) {
            $data = Redis::hMGet($key, $fileds) ?: [];
            foreach ($fileds as $filed) {
                if (!isset($data[$filed])) {
                    $k = end($klineData);
                    $k['time'] = $filed;
                    $k['amount'] = 0;
                    $k['volume'] = 0;
                    $klineData[] = $k;
                } else {
                    $k = json_decode($data[$filed], true);
                    $k['volume'] = $k['amount'];
                    $klineData[] = $k;
                }
            }
            return $klineData;
        } else
            $data = Redis::hGetAll($key) ?: [];
        $firstTime = 0;

        foreach ($data as $time => $kline) {
            $firstTime = $time;
        }


//        \Log::info('$fileds: '. json_encode($fileds));
//        \Log::info('$type: '. $type);
//        \Log::info('$key: '. $key);
//        \Log::info('$start_time: '. $start_time);
//        \Log::info('$firstTime: '. $firstTime);

        $klineData = [];
        foreach ($fileds as $filed) {
            if ($filed < $firstTime)
                continue;
            if (!isset($data[$filed])) {
                $k = end($klineData);
                $k['time'] = $filed;
                $k['amount'] = 0;
                $k['volume'] = 0;
                $klineData[] = $k;
            } else {
                $k = json_decode($data[$filed], true);
                $k['volume'] = $k['amount'];
                $klineData[] = $k;
            }
        }
        return $klineData;


    }

    public static function arraySort($array, $keys, $sort = SORT_DESC)
    {
        $keysValue = [];
        foreach ($array as $k => $v) {
            $keysValue[$k] = $v[$keys];
        }
        array_multisort($keysValue, $sort, $array);
        return $array;
    }

    //根据类型和数据条数返回
    public static function getKlineBySize($market, $type, $size)
    {
        $types = [
            '1min' => 1,
            '5min' => 5,
            '15min' => 15,
            '30min' => 30,
            '60min' => 60,
            '1day' => 1440
        ];
        $key = self::$kline_key_prefix . $market . '-' . $type;
        if (!isset($types[$type])) {
            static::addError('参数类型错误', 400);
            return false;
        }

        $type = $types[$type];
        $fileds = [];
        //获取当前时间（分）
        $now_time = self::getCurrentMinute();

        //计算取{$size}条的起始时间
        $start_time = $now_time - (60 * $type * ($size - 1));
        //根据类型取起始时间的时间段
        $minute = 60 * $type;
        if ($type === 1440) {
            $start_time = strtotime(date('Y-m-d', $start_time));
        } else {
            $start_time = floor($start_time / $minute) * $minute;
        }

        while ($start_time <= $now_time) {
            array_push($fileds, $start_time);
            $start_time += 60 * $type;
        }
        return Redis::hmget($key, $fileds) ?: [];
    }

    //清空kline缓存数据
    public static function clearKlieCache()
    {
        $keys = Redis::keys(self::$kline_key_prefix . '*');
        if ($keys) {
            Redis::del($keys);
        }
        return true;
    }

    //清除多余kline数据缓存
    public static function clearKlineOut($market, $type, $start_time)
    {
        $type = self::$times[$type]['huobi'];
        $hash_key = self::$kline_key_prefix . $market . '-' . $type;
        $kline_data = Redis::hgetall($hash_key);
        if (!$kline_data) {
            return true;
        }
        $new_data = [];
        foreach ($kline_data as $key => $item) {
            if ($key < $start_time) {
                continue;
            }
            $new_data[$key] = $item;
        }
        Redis::del($hash_key);
        Redis::hmset($hash_key, $new_data);
        return true;
    }


    public static function getBiAnNewData($limit, $market, $resolution = '1')
    {
        $api_key = env('BA_API_KEY');
        $secret = env('BA_SECRET');
        if (!$api_key || !$secret) {
            static::addError('缺少密钥对', 400);
            return false;
        }

        $market = strtoupper(str_replace('/', '', $market));
        $time = self::$times[$resolution] ?? false;
        if (!$time) {
            static::addError('时间类型错误', 400);
            return false;
        }
        $time = $time['bian'];

        $api = new \Binance\API($api_key, $secret);
        $ticks = $api->candlesticks($market, $time, $limit);
        return $ticks;
    }

    //获取当前的时间戳(精确到分钟)
    public static function getCurrentMinute()
    {
        $time = strtotime(date('Y-m-d H:i'));
        return $time;
    }

    //获取当日凌晨时间
    public static function getTodayStart()
    {
        return strtotime(date('Y-m-d'));
    }

    //获取以当前时间为基准的24h之前的时间戳(精确到分钟)
    public static function get24HMinute()
    {
        $current_time = self::getCurrentMinute();
        return $current_time - 24 * 60 * 60;
    }

    //统计交易对最新价
    public static function statisMaketNewPrice($market)
    {

        $kline_data = self::getOneKline($market, 60);
        if (!$kline_data) {
            return 0;
        }

        return $kline_data['close'];
    }

    //获取某个时段的kline
    public static function getKlines($market, int $start_time, int $end_time, int $type)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type;
        $flieds = [];
        $item_time = $end_time;
        while ($item_time < $start_time) {
            $flieds[] = $item_time;
            $item_time += 60 * $type;
        }
        $values = Redis::hmget($key, $flieds);
        return $values;
    }

    //获取某个时段的kline
    public static function getKlinesTest($market, int $start_time, int $end_time, int $type)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type . ':test';
        $flieds = [];
        $item_time = $end_time;
        while ($item_time < $start_time) {
            $flieds[] = $item_time;
            $item_time += 60 * $type;
        }
        $values = Redis::hmget($key, $flieds);
        return $values;
    }

    public static function getTest($market, int $start_time, int $end_time, int $type)
    {
        $flieds = [];
        $item_time = $start_time;
        while ($item_time < $end_time) {
            $flieds[] = $item_time;
            $item_time += 60 * $type;
        }

        $result = [];
        foreach ($flieds as $time) {
            $new_item = null;
            $rand = rand(0, 1);
            if ($rand) {
                $new_item['time'] = $time;
                $new_item['high'] = rand(1, 10);
                $new_item['low'] = rand(1, 10);
                $new_item['open'] = rand(1, 10);
                $new_item['close'] = rand(1, 10);
                $new_item['amount'] = rand(1, 10);
            }
            $result[] = json_encode($new_item);

        }
        return $result;
    }

    public static function getOneTest($time)
    {
        $new_item['time'] = $time;
        $new_item['high'] = rand(1, 10);
        $new_item['low'] = rand(1, 10);
        $new_item['open'] = rand(1, 10);
        $new_item['close'] = rand(1, 10);
        $new_item['amount'] = rand(1, 10);
        return json_encode($new_item);
    }

    //统计24h的总成交量
    public static function statisVol($market)
    {
        ;


        $start_time = self::getCurrentMinute();
        $end_time = floor(self::get24HMinute() / 3600) * 3600;

        $values = self::getKlines($market, $start_time, $end_time, 60);
        $total_vol = 0;
        if (!$values) {
            return 0;
        }

        foreach ($values as $item) {
            if (!$item) {
                continue;
            }
            $item = json_decode($item, true);
            $total_vol += (float)$item['amount'];
        }
        return $total_vol;
    }

    public static function getKlineKey($market, $type)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type;
        return $key;
    }

    //获取某条kline记录
    public static function getOneKline($market, $type, $time = 0)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type;
        if (!$time) {
            $time = self::getCurrentMinute();
        }
        $minute = $type * 60;
        $time = floor($time / $minute) * $minute;
        $data = Redis::hget($key, $time);
        if (!$data) {
            return [];
        }
        $data = json_decode($data, true);
        return $data;
    }

    //获取某条kline记录
    public static function getOneKlineTest($market, $type, $time = 0)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type . ':test';
        if (!$time) {
            $time = self::getCurrentMinute();
        }
        $minute = $type * 60;
        $time = floor($time / $minute) * $minute;
        $data = Redis::hget($key, $time);
        if (!$data) {
            return [];
        }
        $data = json_decode($data, true);
        return $data;
    }

    //插入一条Kline
    public static function addOneKline($market, $type, $time, array $data)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type;
        Redis::hset($key, $time, json_encode($data, true));
        return true;
    }

    //插入一条Kline
    public static function addOneKlineTest($market, $type, $time, array $data)
    {
        $key_type = self::$times[$type]['huobi'];
        $key = self::$kline_key_prefix . $market . '-' . $key_type . ':test';
        Redis::hset($key, $time, json_encode($data, true));
        return true;
    }

    //统计价格涨幅
    public static function statisPriceDecline($market)
    {

        $new_price = self::getNewPriceByCache($market);
        if (!$new_price) {
            return 0;
        }
        $end_time = self::getTodayStart();
        $first_data = self::getOneKline($market, 1, $end_time);
        if (!$first_data) {
            return 0.13;
        }
        $res = (($new_price - $first_data['open']) / $first_data['open']);
        $res = sprintf('%.2f', $res);
        return $res;
    }

    //统计最低价和最高价
    public static function statisMaxAndMin($market)
    {
        $end_time = self::getTodayStart();
        $start_time = self::getCurrentMinute();

        $res = [
            'max_price' => 0,
            'min_price' => 0
        ];
        $values = self::getKlines($market, $start_time, $end_time, 60);
        if (!$values) {
            return $res;
        }

        foreach ($values as $item) {
            if (!$item) {
                continue;
            }
            $item = json_decode($item, true);
            if ($res['max_price'] == 0) {
                $res['max_price'] = $item['high'];
            }
            if ($res['min_price'] == 0) {
                $res['min_price'] = $item['low'];
                continue;
            }
            if ($item['low'] < $res['min_price']) {
                $res['min_price'] = $item['low'];
            }
            if ($item['high'] > $res['max_price']) {
                $res['max_price'] = $item['high'];
            }
        }
        return $res;
    }

    //从缓存获取最新价
    public static function getNewPriceByCache($market)
    {
        $price = Redis::get(self::$new_price_prefix . $market);
        if ($price) {
            return $price;
        }
        $price = self::statisMaketNewPrice($market);
        if (!$price) {
            return 0;
        }
        Redis::setex(self::$new_price_prefix . $market, 60, $price);
        return $price;
    }

    //从缓存获取24h交易量
    public static function getVolByCache($market)
    {
        $res = Redis::get(self::$new_vol_prefix . $market);
        if ($res) {
            return $res;
        }

        $res = self::statisVol($market);
        if (!$res) {
            return $res;
        }
        Redis::setex(self::$new_vol_prefix . $market, 60, $res);
        return $res;

    }

    //获取最新价格涨幅
    public static function getPriceDeclineByCache($market)
    {
        $res = Redis::get(self::$price_decline_prefix . $market);
        if ($res) {
            return $res;
        }
        $res = self::statisPriceDecline($market);
        if (!$res) {
            return 0;
        }
        Redis::setex(self::$price_decline_prefix . $market, 60, $res);
        return $res;
    }

    //获取最低价和最高价
    public static function getMaxAndMinPrice($market)
    {
        $res = Redis::get(self::$price_mm_prefix . $market);
        if ($res) {
            return json_decode($res, true);
        }

        $res = self::statisMaxAndMin($market);
        if ($res['min_price'] && $res['max_price']) {
            Redis::setex(self::$price_mm_prefix . $market, 60, json_encode($res));
        }

        return $res;
    }

    public static function get_trading_view_kline($market, $type, $from, $to)
    {
        $market = strtolower($market);
        switch ($type) {
            case 'D':
                $_type = '1day';
                $type = 1440;
                break;
            default:
                $_type = $type . 'min';
                break;
        }

        $key = self::$kline_key_prefix . $market . '-' . $_type;
        $step_arr = self::get_int_time($from, $to, $type);
        if (!Redis::exists($key))
            return ['s' => 'no_data', 'a' => 1];
        // $start = Redis::hGet('market_kline_min_start_time', $market);
        if ($to < 1546099200)
            return ['s' => 'no_data', 'a' => 2];
        $_data = Redis::hMGet($key, $step_arr);
        $m = 0;
        $_v = [];
        $conf = MarketService::getMarketConf($market);
        $data = [];
        foreach ($_data as $k => $v) {
            $v = json_decode($v, true);
            if ($v) {
                $v['volume'] = number_format($v['amount'], $conf->decimals_number);
                $_v['volume'] = $v['volume'];
                $_v['open'] = $v['close'];
                $_v['high'] = $v['close'];
                $_v['low'] = $v['close'];
                $_v['close'] = $v['close'];

            } else {
                if (count($_v)) {
                    $v = $_v;
                    $v['time'] = $k;
                }
            }
            if ($v['amount'] <= 0 || $v['open'] <= 0 || $v['high'] <= 0 || $v['low'] <= 0 || $v['close'] <= 0) {
                continue;
            }
            $data[] = $v;
            $m++;
            // 时间 - 数量 - 开盘价 - 最高价- 最低价 - 收盘价
            //    $data['t'][] = floatval($k);
            //    $data['o'][] = sprintf('%.'.$conf->decimals_price.'f', $v['open']);
            //    $data['h'][] = sprintf('%.'.$conf->decimals_price.'f', $v['high']);
            //    $data['l'][] = sprintf('%.'.$conf->decimals_price.'f', $v['low']);
            //    $data['c'][] = sprintf('%.'.$conf->decimals_price.'f', $v['close']);
            //    $data['v'][] = sprintf('%.'.$conf->decimals_number.'f', $v['amount']);
        }
        if (!$m)
            return [];
        return $data;
    }

}
