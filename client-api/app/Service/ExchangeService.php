<?php

namespace App\Services;

use App\Model\ConfInviteBonus;
use App\Model\Exchange;
use App\Model\ExchangeOperateLog;
use Illuminate\Support\Facades\DB;


class ExchangeService extends BaseService
{

    const TOWER_LAYER = 5000;
    const TOWER_TOP_QUANTITY = 150000;
    const TOWER_BOTTOM_QUANTITY = 250000;


    public static function checkExchangeThreshold($userId, $exchange, $logId)
    {
        //todo 改价机制, 不以初始值为基数

        //todo 一个塔 共5000 层 顶层 1w ,底层25w 2020-11-23 改需求
        $exchanged = bcsub($exchange['total_quantity'], $exchange->surplus);
        if ($exchange->triangle_next_threshold && $exchanged < $exchange->triangle_next_threshold) {
            return false;
        }

        if ($exchange->triangle == self::TOWER_LAYER) {
            return false;
        }
        if (!$exchange->triangle_next_threshold) {//init data
//            Exchange::query()->where('id', $exchange['id'])->update(['triangle_next_threshold' => current($triangle)]);
            $exchange->triangle_next_threshold = self::layerThreshold(1);
            $exchange->layer = 1;
            $exchange->save();
            ExchangeOperateLog::query()->insert([
                'action' => 'price',
                'created_by' => $userId,
                'threshold' => self::layerThreshold(1),
                'created_at' => date('Y-m-d H:i:s'),
                'value' => $exchange->initial_price,
                'exchange_log_id' => $logId
            ]);
        }
        if ($exchanged >= $exchange->triangle_next_threshold) {
            if (!$exchange->layer) {
                $layer = 1;
                $triangleData = 1;
            } /*else if ($exchange->layer == 1) {
//                $triangleData = DB::raw('triangle + 1');
                $layer = $totalLevel;
            }*/ else {
                $layer = DB::raw('layer + 1');
            }

            $res = Exchange::query()->where('last_change_price_threshold', $exchange->last_change_price_threshold)
                ->update([
                    'last_change_price_threshold' => $exchange->triangle_next_threshold,
                    'last_change_price_at' => date('Y-m-d H:i:s'),
//                    'current_price' => DB::Raw('initial_price  + (initial_price * ' . $exchange->fluncuation_rate . ' * (' . $exchange->change_times . '+ 1) )'),
                    'current_price' => $exchange->current_price ? DB::Raw('current_price  * (1+' . $exchange->fluncuation_rate . ' )') : DB::Raw('initial_price  * (1+' . $exchange->fluncuation_rate . ' )'),
//                    'triangle' => ($exchange->triangle_level == 1 ? DB::raw('triangle + 1') : DB::raw('triangle')),
//                    'triangle_level' => $exchange->triangle_level == 1 ? $totalLevel : DB::raw('triangle_level - 1'),
                    'layer' => $layer,
                    'change_times' => DB::raw('change_times + 1'),
                    'triangle_next_threshold' => self::layerThreshold((int)($exchange->layer) + 1)
                ]);
            if ($res) {
                $newExchange = Exchange::query()->first();
                ExchangeOperateLog::query()->insert([
                    'action' => 'price',
                    'created_by' => $userId,
                    'value' => $newExchange->current_price,
                    'created_at' => date('Y-m-d H:i:s'),
                    'threshold' => self::layerThreshold((int)($exchange->layer) + 1),
                    'exchange_log_id' => $logId
                ]);
            }
        }
        return parent::getLastError(); // TODO: Change the autogenerated stub
    }


    public static function triangle()
    {
        $level = ConfInviteBonus::query()->value('matrix_level');
        $totalLevel = $level;
        $exchange = Exchange::query()->first();
//        $triangleHeight = pow(($level ** 2) - (bcdiv($level, 2, 8) ** 2), 1 / 2);
//        $trapeziumHeight = $triangleHeight / $level;
        $res = [];
        for (; $level > 0; $level--) {

            $quantity = ($exchange->total_quantity / $totalLevel) * (($level * 2 - 1) / $totalLevel / $totalLevel);
            $res[$level] = $quantity;
        }
        return $res;
    }

    public static function checkExchangeThresholdBak($userId, $exchange, $logId)
    {
        //todo 改价机制, 不以初始值为基数

        //todo 一个塔 共5000 层 顶层 1w ,底层25w 2020-11-23 改需求
        $exchanged = bcsub($exchange['total_quantity'], $exchange->surplus);
        if ($exchange->triangle_next_threshold && $exchanged < $exchange->triangle_next_threshold) {
            return false;
        }


        $triangle = self::triangle();

        $totalLevel = key($triangle);
        if ($exchange->triangle == $totalLevel && $exchange->triangle_level == 1) {
            return false;
        }
        if (!$exchange->triangle_next_threshold) {
            Exchange::query()->where('id', $exchange['id'])->update(['triangle_next_threshold' => current($triangle)]);
            $exchange->triangle_next_threshold = current($triangle);
            $exchange->triangle_level = $totalLevel;
            $exchange->triangle = 1;
            $exchange->save();
            ExchangeOperateLog::query()->insert([
                'action' => 'price',
                'created_by' => $userId,
                'threshold' => current($triangle),
                'created_at' => date('Y-m-d H:i:s'),
                'value' => $exchange->initial_price,
                'exchange_log_id' => $logId
            ]);
        }
        if ($exchanged >= $exchange->triangle_next_threshold) {
            if (!$exchange->triangle_level) {
                $triangleLevel = $totalLevel;
//                $triangleData = 1;
            } else if ($exchange->triangle_level == 1) {
//                $triangleData = DB::raw('triangle + 1');
                $triangleLevel = $totalLevel;
            } else {
                $triangleLevel = DB::raw('triangle_level - 1');
            }
            $increase = $triangle[($exchange->triangle_level - 1 > 0 ? $exchange->triangle_level - 1 : $totalLevel)];

            $res = Exchange::query()->where('last_change_price_threshold', $exchange->last_change_price_threshold)
                ->update([
                    'last_change_price_threshold' => $exchange->triangle_next_threshold,
                    'last_change_price_at' => date('Y-m-d H:i:s'),
                    'current_price' => DB::Raw('initial_price  + (initial_price * ' . $exchange->fluncuation_rate . ' * (' . $exchange->change_times . '+ 1) )'),
                    'triangle' => ($exchange->triangle_level == 1 ? DB::raw('triangle + 1') : DB::raw('triangle')),
//                    'triangle_level' => $exchange->triangle_level == 1 ? $totalLevel : DB::raw('triangle_level - 1'),
                    'triangle_level' => $triangleLevel,
                    'change_times' => DB::raw('change_times + 1'),
                    'triangle_next_threshold' => DB::Raw('triangle_next_threshold  +' . $increase)
                ]);
            if ($res) {
                $newExchange = Exchange::query()->first();
                ExchangeOperateLog::query()->insert([
                    'action' => 'price',
                    'created_by' => $userId,
                    'value' => $newExchange->current_price,
                    'created_at' => date('Y-m-d H:i:s'),
                    'threshold' => $exchange->triangle_next_threshold + $increase,
                    'exchange_log_id' => $logId
                ]);
            }
        }
        return parent::getLastError(); // TODO: Change the autogenerated stub
    }

    public static function layerThreshold($layer)
    {
        //get top threshold
        if ($layer == 0) {
            return false;
        }
        if ($layer == 1) {
            return self::TOWER_BOTTOM_QUANTITY;
        }
        bcscale(8);
        $x = bcdiv(bcsub(self::TOWER_BOTTOM_QUANTITY, self::TOWER_TOP_QUANTITY, 8), self::TOWER_LAYER - 1, 8);
        return bcsub(bcmul(self::TOWER_BOTTOM_QUANTITY, $layer), bcmul($x, array_sum(range(1, $layer-1))));
    }
}
